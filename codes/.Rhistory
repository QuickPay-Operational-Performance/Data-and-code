knitr::opts_chunk$set(echo = TRUE)
library(openxlsx)
library(tidyverse)
library(dplyr)
library(pryr)
library(lfe) # linear fixed effects
library(DescTools)
library(zoo) # for year quarter
library(stargazer)
library(broom)
library(data.table)
library(scales)
data_folder='~/Dropbox/data_quickpay/qp_data/'
# Keep only projects whose start dates match with API one
projects_to_keep=fread(paste0(data_folder,'projects_to_keep.csv'))
# read quarterly resampled data
df=fread(paste0(data_folder,'resampled_qp_data/qp_resampled_data_fy10_to_fy12_with_zero_obs.csv'))
# specify date columns
date_cols=c("action_date_year_quarter","last_reported_start_date","last_reported_end_date")
df[,(date_cols):= lapply(.SD, as.Date), .SDcols = date_cols]
# restrict to quarter ending June 30, 2012
df=subset(df,as.Date(action_date_year_quarter)<max(as.Date('2012-07-01'))&
contract_award_unique_key%in%projects_to_keep$contract_award_unique_key)
# data is truncated at July 1, 2012 --
# so quarter ending Sept 30, 2012 will only have values as of July 1, 2012
df_first_reported=fread(paste0(data_folder,'qp_data_first_reported.csv'))
# contains time-invariant contract characteristics -- info when contract first appeared in the data
# Assign variables: Delay, Winsorized Delay, Post_t, Treat_i
# sort by contract id and date
df=df[order(contract_award_unique_key,
action_date_year_quarter)]
# determine quarter-to-quarter delay
df[,delay:=ifelse(contract_award_unique_key==lag(contract_award_unique_key,1),
last_reported_end_date-lag(last_reported_end_date,1),NaN)]
# winsorize quarter-to-quarter delay
df[,winsorized_delay:=Winsorize(delay,na.rm=TRUE)]
#Post_t: A dummy that period t is post-treatment
df[,post_t:=ifelse(action_date_year_quarter>as.Date("2011-04-27"),1,0)]
# quickpay implemented on 27 April 2011. So all quarters starting 30 June 2011 will be in post-period
#Treat_i: A dummy that contract i is in the treatment group
df[,treat_i:=ifelse(business_type=="S",1,0)]
# quickpay was implemented for small business contracts
# Project age is a highly skewed variable
# assign number of quarters since project started: "project age" in some sense
df[, project_quarter_age := rowid(contract_award_unique_key)]
df[,project_quarter_tercile:=as.factor(ntile(project_quarter_age,3))]
# Including it as fixed effects doesn't work because projects in treatment and control are not always in same "tercile" while controling for everything else.
# ContractFinancing_i
df_first_reported[,contract_financing_i:=ifelse(!is.null(contract_financing_code)&
!contract_financing_code%in%c("Z", ""),1,0)]
# Competition_i
df_first_reported[,competitively_awarded_i:=ifelse(!is.null(extent_competed_code)&
!extent_competed_code%in%c("","G","B", "C","E"),1,0)]
# InitialDuration_i
df_first_reported[,initial_duration_in_days_i:=
as.numeric(
as.Date(period_of_performance_current_end_date)-
as.Date(period_of_performance_start_date))]
df_first_reported[,winsorized_initial_duration_in_days_i:=
Winsorize(as.numeric(
as.Date(period_of_performance_current_end_date)-
as.Date(period_of_performance_start_date)),na.rm=T)]
# InitialBudget_i
df_first_reported[,winsorized_initial_budget_i:=
Winsorize(base_and_all_options_value,na.rm=T)]
# Change type to string modification number
df_first_reported[,modification_number:=as.character(modification_number)]
select_cols=c("contract_award_unique_key",
"recipient_duns",
"naics_code",
"product_or_service_code",
"modification_number",
"number_of_offers_received",
"contract_financing_i",
"competitively_awarded_i",
"period_of_performance_start_date",
"initial_duration_in_days_i",
"winsorized_initial_duration_in_days_i",
"winsorized_initial_budget_i")
# not necessary but speed efficient to set keys
setkey(df_first_reported[,..select_cols],
contract_award_unique_key)
setkey(df,contract_award_unique_key)
# Combine all variables into dataframe needed for regression
reg_df=merge(df,
df_first_reported[,..select_cols],
all.x = TRUE, # keep values in df, add columns of df_first_reported_cols
by=c("contract_award_unique_key"))
# sort by contract id and date (just to be doubly sure)
reg_df=reg_df[order(contract_award_unique_key,
action_date_year_quarter)]
reg_df[,period_of_performance_start_date:=as.Date(period_of_performance_start_date)]
# "period_of_performance_start_date" here comes from first reported info
# So it is the actual start date for a project
# get project duration as of last quarter in the denominator
reg_df[,percentage_delay:=ifelse(contract_award_unique_key==lag(contract_award_unique_key,1),
delay/as.numeric(lag(last_reported_end_date,1)-lag(period_of_performance_start_date,1)),
NaN)]
reg_df[,wins_percentage_delay:=Winsorize(100*percentage_delay,na.rm=T)]
hist(subset(reg_df,delay!=0)$delay)
?hist
hist(subset(reg_df,delay!=0)$delay,xlim=range(-200,500))
a=subset(reg_df,delay!=0)
a[,wins_delay:=Winsorize(delay,na.rm=T,probs=c(0.025,0.975))]
hist(a$wins_delay)
hist(reg_df$winsorized_delay)
hist(subset(reg_df,winsorized_delay!=0)$winsorized_delay)
hist(subset(reg_df,winsorized_delay!=0 & winsorized_delay<100)$winsorized_delay)
hist(a$wins_delay,breaks=100)
folder_path='/Users/vibhutidhingra/Dropbox/data_quickpay/qp_data/'
write.csv(reg_df,paste0(folder_path,'reg_df_with_zero_obs.csv'))
length(unique(reg_df$contract_award_unique_key))
nrow(subset(reg_df,is.na(delay)))
a=subset(reg_df,is.na(delay))$contract_award_unique_key
a
b=unique(reg_df$contract_award_unique_key)
all(a==b)
nrow(subset(reg_df,delay==0))
nrow(subset(reg_df,delay!=0))
nrow(subset(reg_df,delay!=0))/nrow(reg_df)
data <- read.csv("/Users/vibhutidhingra/Dropbox/data_quickpay/qp_data/reg_df.csv")
data <- data[,-1]
# delete the first column, which consists of the row names
sum(data$delay==0, na.rm=TRUE)
# a total of 94,349 zero delay observations
sum(!is.na(data$delay))
# 127,056 delay obs. in total
# over 70% zeros in the data
data.noNA <- data[!is.na(data$delay),]
# only keep the rows with non-NA delays
delay.nonzero0 <- data.noNA$delay[!(data.noNA$delay==0)]
LB<- sort(delay.nonzero0)[round(length(delay.nonzero0)*0.025)+1]
# LB = -182
UB<- sort(delay.nonzero0)[round(length(delay.nonzero0)*0.975)+1]
# UB = 507
row.id <- which(data.noNA$delay >= LB & data.noNA$delay <= UB)
# row ids with truncated delay data
data.trun <- data.noNA[row.id,]
# discard the quarterly delays in the upper and lower 2.5% to avoid outliers
# includes zero delays
delay.nonzero0 <- data.trun[!(data.trun$delay==0), ]
nrow(delay.nonzero0)
nrow(data.trun)
tmp <- unique(delay.nonzero0[,c("contract_award_unique_key", "business_type")])
id.s <- tmp[tmp$business_type %in% "S",1]
id.l <- tmp[tmp$business_type %in% "O",1]
#
head(id.s)
nrow(id.s)
length(id.s)
axisT <- sort(unique(data.trun$action_date_year_quarter))
axisT
colnames(data.tru)
colnames(data.trum)
colnames(data.trun)
